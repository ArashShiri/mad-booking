// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//
//= require jquery
//= require jquery.ui/all
//= require jquery.timepicker.js
//= require jquery_ujs
//= require foundation
//= require fullcalendar
//= require home
//= require barcode_listener
//= require twitter/typeahead
//= require recurring_select

// PRODUCTION
//var app_path = '/mad-booking';
// DEV
var app_path = '';

function initializeComponents($container) {
	$container.find('input.date').datepicker({
		"changeMonth" : "true",
		"changeYear" : "true",
		"nextText" : "&gt;",
		"prevText" : "&lt;"
	});
	$container.find('input.time').timepicker({
		"timeFormat" : "h:i A"
	});

	//$container.foundation('section', 'reflow');

	$('li > a.remove').click(function() {
		$(this).parent().remove();
	});

	/* Toggle */

	$preview_links = $(".preview");

	$preview_links.click(function(e) {

		$(this).toggleClass('inactive success');
		var ids = new Array();

		$preview_links.filter(':not(.inactive)').each(function() {
			$(this).closest('section').find('.item').each(function() {
				ids.push(parseInt($(this).attr('data-id')));
			});
		});

		//console.log(ids);

		reloadCalendar(ids);

		return false;
	});

	$('#deselect-previews').click(function() {
		$preview_links.addClass('inactive').removeClass('success');
		reloadCalendar();
	});

	/* Search */

	var $search_input = $container.find('.usersearch');

	window.localStorage.clear();

	$search_input.typeahead({
		name: "name",
		prefetch: "users/username.json"
	});


	$search_input.on('usersearch:selected', function() {
		$(this).closest('form').submit();
	});

	var $equip_input = $('.equipsearch');

	$equip_input.typeahead({
		name: 'equipment',
		prefetch: {url: 'equipment.json'},
		valueKey: 'name'
	});

	var $main_equip_search = $('#equipment');
	$main_equip_search.on('typeahead:selected',function(e){
		var $chkbox = $("[name*='" + e.target.value + "']").eq(0);
		$chkbox.click();
		//$chkbox.closest('p').remove();
	});

	var $add_equip = $('#equipment_details .equipsearch');
	$add_equip.on('typeahead:selected',function(e){
		$.ajax({
			url: "equipment.json",
			success: function(data){
				for (i = 0; i < data.length; i++){
					if (data[i].name == e.target.value){
						$('#equip_list').append('<li><a class="label radius alert right remove" onclick="$(this).parent().remove();"><i class="icon-remove"></i></a><span class="muted">' + 'Category ' + '<span class="gt"><i class="icon-angle-right"></i> </span></span>' + data[i].name + '<input id="booking_equipment_ids_" name="booking[equipment_ids][]" type="hidden" value="' + data[i].id + '"><span class="round secondary label right">Booking</span></li>');
					}
				}
			}
		});

	});

	$submitBooking = $("#submitBooking");
	$submitBooking.bind('click',function(e){
		e.preventDefault();
		validateBookingForm();
	});

	$submitUser = $("#submitUser");
	$submitUser.bind('click',function(e){
		e.preventDefault();
		validateUserForm();
	});

    /*
    $weekly_repeat = $("#weekly_repeat");
    $repeat_details = $("#repeat_details");
    $weekly_repeat.bind('click',function(e){
        if ($weekly_repeat.is(':checked')){
            $repeat_details.show();
        }
        else{
            $repeat_details.hide();
        }
    });
    */

}

$(function() {
	initializeComponents($('body'));

	/* Modals */

	var $modalContainer = $("#modalContainer");

	$modalContainer.on('opened', function () {
	  $(this).foundation('section', 'reflow');
	});

	$('.modal').each(function(){
		$(this).attr('data-reveal-id', 'modalContainer').attr('data-reveal-ajax', $(this).attr('href'));
	});


	$('#createBooking').click(function(){

		if ($(this).hasClass('disabled')) return;

		var $items = $('#equipmentList').find('.equipCheck:checked');
		var equip_ids = [];

		$items.each(function(index) {
			equip_ids.push(this.value);
		});

		$modalContainer.foundation('reveal', 'open', {
			url: "bookings/new",
			data: {
				ids : equip_ids
			},
			complete: function() {
				initializeComponents($modalContainer);
				$modalContainer.find('p.title').trigger('click'); //force accordion open
			},
			error: function() {
				alert('loading error');
			}
		});
	});

	/* Equipment List */

	var $equipmentList = $("#equipmentList");
	var $createBooking = $("#createBooking");

	$equipmentList.find('section.active').removeClass('active'); // force accordion closed

	$('.equipCheck').click(function(){

		var $parent = $(this).closest('section');

		var count_all = $equipmentList.find('.equipCheck:checked').length;
		var count_this = $parent.find('.equipCheck:checked').length;

		if (count_all > 0) {
			$createBooking.removeClass('disabled');
			$createBooking.html('Book ' + count_all + ' items');
		}
		else {
			$createBooking.addClass('disabled');
			$createBooking.html('Select items to create a booking');
		}

		if (count_this > 0) {
			$parent.addClass('selected');
		}
		else {
			$parent.removeClass('selected');
		}
	});

	/* Barcodes */
	var chars = [];
	var barcode = "";
    $booking_user = $("#booking_user");
	$(window).keypress(function(e) {
        if ($modalContainer.is('.open')){
            barcode += String.fromCharCode(e.which);
            if (e.which === 13) {
                if ($("#bc_out_" + barcode).length > 0) {
                    $("#bc_out_" + barcode)[0].value = $("#bc_out_" + barcode).attr('data');
                    $("#status_" + barcode).attr('class','right round label')
                    $("#status_" + barcode)[0].innerHTML = "Signing Out"
                }
                else if ($("#bc_in_" + barcode).length > 0) {
                    $("#bc_in_" + barcode)[0].value = $("#bc_in_" + barcode).attr('data');
                    $("#status_" + barcode).attr('class','right round success label')
                    $("#status_" + barcode)[0].innerHTML = "Signing In"
                } else {
                    alert("Item with barcode " + barcode + " not found for sign in/out.");
                }

                barcode = "";
            }
        }
	});

	/* Expand

	$(".expand").click(function() {
		var $container = $('.middle-column');
		var $others = $container.siblings('.columns');

		$others.each(function() {
			$(this).attr('class', 'columns large-1');
		});

		$container.attr('class', 'columns middle-column large-' + (12-$others.length));

		setTimeout(function() {
			$(window).trigger('resize');
		}, 1000);
	});

	*/

	/* Views */

	var $views = $('#views');
	var $inputs = $views.find('input');
	var $columns = $('#layout > .columns');

	var $leftColumn = $columns.eq(0);
	var $middleColumn = $columns.eq(1);
	var $rightColumn = $columns.eq(2);

	var sizeArray = [];

	$inputs.click(function() {
		updateViews();
	});

	function updateViews() {
		var switchLeft = $views.find("#leftOn").is(':checked');
		var switchMiddle = $views.find("#middleOn").is(':checked');
		var switchRight = $views.find("#rightOn").is(':checked');

		$leftColumn.css('display', switchLeft ? 'block' : 'none');
		$middleColumn.css('display', switchMiddle ? 'block' : 'none');
		$rightColumn.css('display', switchRight ? 'block' : 'none');


		if (switchLeft && switchMiddle && switchRight) {
			sizeArray = [3, 6, 3];
		}
		else if (!switchLeft && switchMiddle && switchRight) {
 			sizeArray = [0, 9, 3];
		}
		else if (switchLeft && !switchMiddle && switchRight) {
			sizeArray = [6, 0, 6];
		}
		else if (switchLeft && switchMiddle && !switchRight) {
			sizeArray = [3, 9, 0];
		}
		else if (switchLeft && !switchMiddle && !switchRight) {
			sizeArray = [12, 0, 0];
		}
		else if (!switchLeft && switchMiddle && !switchRight) {
			sizeArray = [0, 12, 0];
		}
		else if (!switchLeft && !switchMiddle && switchRight) {
			sizeArray = [0, 0, 12];
		}
		else if (!switchLeft && !switchMiddle && !switchRight) {
			sizeArray = [0, 0, 0];
		}

		sizeArray.forEach(function(size, index) {
			$columns.eq(index).attr('class', 'columns large-' + size);
		});

		$(window).trigger('resize');
	}

});

function validateUserForm(){
	/* Get user list we need for validations */

	var userList;
	$.ajax({
		url: "users.json",
		async: false,
		success: function(data){
			userList = data;
		}
	});

	var errors = [];

	var uName = $('#user_username').value

	/* Validate user name is non-blank */
	if (uName == ""){
		errors.push("User name cannot be blank")
	}


	/* Validate that the user name isn't already taken */

	var userExists = false;
	for (i = 0; i < userList.length; i++){
		if (userList[i].username == userName){
			userExists = true;
		}
	}
	if (userExists){
		errors.push("User " + userName + " already exists.");
	}

	/* Submit the form if there are no validation errors */
	if (errors.length == 0){
		$('#submitUser').closest('form').submit();
	}
	else{
		var $modalContainer = $('#modalContainer');
		$modalContainer.find('.alert-box').remove();
		$.each(errors,function(i,v){
			$modalContainer.find('.errors').append("<div data-alert class='alert-box alert'>" + v + "</div>");
		});

	}


}

function validateBookingForm(){
	/* Get user list we will need for a bunch of validations */
	var userList;
	$.ajax({
		url: "users.json",
		async: false,
		success: function(data){
			userList = data;
		}
	});


	/* Get list of equipment IDs being booked */
	var equip_ids = [];
	$.each($('#equip_list li input'),function(i,input){
		equip_ids.push(parseInt(input.value));
	});

	/* Get ID of current event */
	var booking_id = $('#booking_id')[0].value;

	var errors = [];

	/* Validate timestamps */
	/* Start time must come before the end time */
	var start_d = $('#schedule_start').datepicker('getDate').toDateString();
	var end_d = $('#schedule_end').datepicker('getDate').toDateString();
	var start_t = $('#schedule_start_time').timepicker('getTime').toTimeString();
	var end_t = $('#schedule_end_time').timepicker('getTime').toTimeString();

	var sd = Date.parse(start_d + " " + start_t);
	var ed = Date.parse(end_d + " " + end_t);

	if (sd >= ed){
		errors.push("Start time must be before end time.");
	}


	/* Validate that at least one piece of equipment is being booked */
	var $equip_list_li = $('#equip_list li');
	if ($equip_list_li.length <= 0 ){
		errors.push("You must book at least one piece of equipment.");
	}

	var userName = $('#booking_user')[0].value;

	/* Validate that user name isn't blank */
	if (userName == ""){
		errors.push("User name cannot be blank.");
	}

	/* Validate that the user is an existing user */
	/* Only needs to be done if the "create?" box is unchecked */
	if (!$('#create_if_new')[0].checked){
		var userExists = false;
		for (i = 0; i < userList.length; i++){
			if (userList[i].username == userName){
				userExists = true;
			}
		}
		if (!userExists){
			errors.push("User " + userName + " does not exist.");
		}
	}


	/* Validate that the user isn't blacklisted */
	/* Only applies if the user exists */
	if (userExists){
		var userStatusOK = false;
		for (i = 0; i < userList.length; i++){
			if (userList[i].username == userName){
				if (userList[i].status == 0){
					userStatusOK = true;
				}
			}
		}
		/* If the user's status is not okay, we only want to raise an error if the user isn't new */
		if (!userStatusOK){
			errors.push("User " + userName + " is blacklisted. Do not loan them equipment.");
		}
	}

	/* Validate that we aren't double-booking equipment */
	// Get events from calendar
	var calEvents = $('#calendar').fullCalendar('clientEvents');

	$.each(calEvents,function(i,ev){
		if(ev.id != booking_id && ev.status != 2){
			//Event A is fullCalendar event
			//Event B is pending event
			//Method is described here - http://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap
			var a_start = ev.start;
			var a_end = ev.end;
			var b_start = new Date(sd);
			var b_end = new Date(ed);
			if ((a_start <= b_end) && (a_end >= b_start)){
				//Event conflicts with respect to time, now check equipment
				$.each(ev.equip,function(i,eq){
					if (equip_ids.indexOf(eq.id) != -1){
						errors.push("Conflict with another event.");
					}
				});
			}
		}

	});



	/* Submit the form if there are no validation errors */
	if (errors.length == 0){
		$('#submitBooking').closest('form').submit();
	}
	else{

		var $modalContainer = $('#modalContainer');
		$modalContainer.find('.alert-box').remove();
		$.each(errors,function(i,v){
			$modalContainer.find('.errors').append("<div data-alert class='alert-box alert'>" + v + "</div>");
		});

	}

}

$(document).foundation();
